{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["inputForm","handleChange","event","setState","target","name","value","getUserInput","preventDefault","result","state","amount","group","tip","total","toFixed","className","action","method","htmlFor","onChange","this","type","id","min","step","placeholder","required","max","onClick","Component","App","bills","Form","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0MAqFeA,E,kDAjFb,aAAe,IAAD,8BACZ,gBASFC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAZxB,EAgBdC,aAAe,SAACL,GACdA,EAAMM,iBAEN,IAAMC,EAAU,EAAKC,MAAMC,OAAS,EAAKD,MAAME,MAAS,EAAKF,MAAMG,IAEnE,EAAKV,SAAS,CACZW,MAAOL,EAAOM,QAAQ,MApBxB,EAAKL,MAAQ,CACXE,MAAO,GACPD,OAAQ,GACRE,IAAK,IACLC,MAAO,IANG,E,qDA2BZ,OACE,0BAAME,UAAU,SAASC,OAAO,SAASC,OAAO,QAC9C,6BACE,2BAAOC,QAAQ,aAAf,aACA,2BACEC,SAAUC,KAAKpB,aACfqB,KAAK,SACLC,GAAG,YACHjB,MAAOe,KAAKX,MAAME,MAClBY,IAAI,IACJC,KAAK,IACLC,YAAY,2BACZrB,KAAK,QACLsB,UAAQ,KAIZ,6BACE,2BAAOR,QAAQ,cAAf,aACA,2BACEC,SAAUC,KAAKpB,aACfqB,KAAK,SACLC,GAAG,aACHjB,MAAOe,KAAKX,MAAMC,OAClBa,IAAI,IACJC,KAAK,MACLC,YAAY,qBACZrB,KAAK,SACLsB,UAAQ,KAIZ,6BACE,2BAAOR,QAAQ,aAAf,QACA,2BACEC,SAAUC,KAAKpB,aACfqB,KAAK,QACLC,GAAG,YACHjB,MAAOe,KAAKX,MAAMG,IAClBW,IAAI,MACJI,IAAI,MACJH,KAAK,OACLpB,KAAK,SAIT,4BAAQwB,QAASR,KAAKd,cAAtB,aAEA,4BAAKc,KAAKX,MAAMI,Y,GA5EAgB,aCmBTC,E,kDAlBb,aAAe,IAAD,8BACZ,gBACKrB,MAAQ,CACXsB,MAAO,IAHG,E,qDAQZ,OACE,yBAAKhB,UAAU,WACb,wBAAIA,UAAU,YAAd,UACA,iDACA,kBAACiB,EAAD,W,GAbUH,aCSEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.22c8c6fb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import firebase from \"./firebase\";\n\nclass inputForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      group: \"\",\n      amount: \"\",\n      tip: 1.1,\n      total: \"\",\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  getUserInput = (event) => {\n    event.preventDefault();\n\n    const result = (this.state.amount / this.state.group) * this.state.tip;\n\n    this.setState({\n      total: result.toFixed(2),\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"tipApp\" action=\"submit\" method=\"post\">\n        <div>\n          <label htmlFor=\"groupSize\">How many?</label>\n          <input\n            onChange={this.handleChange}\n            type=\"number\"\n            id=\"groupSize\"\n            value={this.state.group}\n            min=\"1\"\n            step=\"1\"\n            placeholder=\"Add the number of people\"\n            name=\"group\"\n            required\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"billAmount\">How much?</label>\n          <input\n            onChange={this.handleChange}\n            type=\"number\"\n            id=\"billAmount\"\n            value={this.state.amount}\n            min=\"0\"\n            step=\".01\"\n            placeholder=\"Add the bill total\"\n            name=\"amount\"\n            required\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"tipAmount\">Tip?</label>\n          <input\n            onChange={this.handleChange}\n            type=\"range\"\n            id=\"tipAmount\"\n            value={this.state.tip}\n            min=\"1.1\"\n            max=\"1.5\"\n            step=\"0.05\"\n            name=\"tip\"\n          />\n        </div>\n\n        <button onClick={this.getUserInput}>Calculate</button>\n\n        <h3>{this.state.total}</h3>\n      </form>\n    );\n  }\n}\n\nexport default inputForm;\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      bills: [],\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h1 className=\"logoName\">Spl|tr</h1>\n        <p>Bill Splitting App</p>\n        <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}