{"version":3,"sources":["firebase.js","Form.js","Bills.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","inputForm","handleChange","event","setState","target","name","value","clearForm","preventDefault","group","amount","tip","state","className","htmlFor","onChange","this","type","id","maxLength","placeholder","min","step","required","onClick","props","getTotal","Component","Bills","receipts","map","bill","key","delete","App","handleClick","billInfo","dbRef","database","ref","result","push","toFixed","total","alert","deleteBill","billId","child","remove","bills","on","snapshot","firebaseData","val","billData","Form","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89938a95.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDsaJneEsu2c-805ApRtKW68PgiaBr9YQE\",\n  authDomain: \"spltrproject.firebaseapp.com\",\n  databaseURL: \"https://spltrproject.firebaseio.com\",\n  projectId: \"spltrproject\",\n  storageBucket: \"spltrproject.appspot.com\",\n  messagingSenderId: \"427025200282\",\n  appId: \"1:427025200282:web:ecec4d99169110f50d1b23\",\n  measurementId: \"G-B104P7SX9W\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\nexport default firebase;\n","import React, { Component } from \"react\";\n\nclass inputForm extends Component {\n  constructor() {\n    super();\n    // Create a state for each of the form input values\n    this.state = {\n      name: \"\",\n      group: \"\",\n      amount: \"\",\n      tip: \"\",\n    };\n  }\n\n  // Create a method to watch and set the state with the value of whatever field the user is in\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // Create a method to set the states for the form values back to empty strings on button click\n  clearForm = (event) => {\n    event.preventDefault();\n\n    this.setState({\n      name: \"\",\n      group: \"\",\n      amount: \"\",\n      tip: \"\",\n    });\n  };\n\n  // Populate the page\n  render() {\n    return (\n      <form>\n        <div className=\"tipApp\">\n          <div>\n            <label htmlFor=\"groupName\">\n              <i className=\"icon fas fa-id-card\"></i>Group Name?\n            </label>\n            <input\n              // Watch for a change and value input\n              onChange={this.handleChange}\n              type=\"text\"\n              id=\"groupName\"\n              value={this.state.name}\n              maxLength=\"14\"\n              placeholder=\"Name your group\"\n              name=\"name\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"groupSize\">\n              <i className=\"icon fas fa-users\"></i>How many?\n            </label>\n            <input\n              // Watch for a change and value input\n              onChange={this.handleChange}\n              type=\"number\"\n              id=\"groupSize\"\n              value={this.state.group}\n              min=\"1\"\n              step=\"1\"\n              placeholder=\"Add the group size\"\n              name=\"group\"\n              required\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"billAmount\">\n              <i className=\"icon fas fa-receipt\"></i>How much?\n            </label>\n            <input\n              // Watch for a change and value input\n              onChange={this.handleChange}\n              type=\"number\"\n              id=\"billAmount\"\n              value={this.state.amount}\n              min=\"0\"\n              step=\".01\"\n              placeholder=\"Add the bill total\"\n              name=\"amount\"\n              required\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"tipAmount\">\n              <i className=\"heart fas fa-heart\"></i>Tip?\n            </label>\n            <input\n              // Watch for a change and value input\n              onChange={this.handleChange}\n              type=\"number\"\n              id=\"tipAmount\"\n              value={this.state.tip}\n              min=\"10\"\n              step=\"5\"\n              placeholder=\"Add the tip %\"\n              name=\"tip\"\n            />\n          </div>\n        </div>\n\n        <button className=\"formButton clear\" onClick={this.clearForm}>\n          Reset\n        </button>\n\n        <button\n          className=\"formButton submit\"\n          // Pass the users provided data to the main component on button click\n          onClick={(event) => this.props.getTotal(event, this.state)}\n        >\n          Split it!\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default inputForm;\n","import React from \"react\";\n\n// Map through the array and populate the objects/bills onto the page\n\nconst Bills = (props) => {\n  return (\n    <ul>\n      {props.receipts.map((bill) => {\n        return (\n          <li key={bill.id}>\n            <p>{bill.name}</p>\n            <p>${bill.value}</p>\n            <button className=\"remove\" onClick={() => props.delete(bill.id)}>\n              <i className=\"fas fa-times-circle\"></i>\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default Bills;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport Form from \"./Form\";\nimport Bills from \"./Bills\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // Create a state for the bill array that will hold the bill objects\n      bills: [],\n      // Create a state for the total amount per person\n      total: 0,\n    };\n  }\n\n  // Wait for the document\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    // Event listener that watches the database\n    dbRef.on(\"value\", (snapshot) => {\n      const firebaseData = snapshot.val();\n\n      // Create an array to update the bill state\n      const billData = [];\n\n      // Push the users data into the billData array\n      for (const bill in firebaseData) {\n        billData.push({\n          id: bill,\n          name: firebaseData[bill].name,\n          value: firebaseData[bill].result,\n        });\n      }\n\n      // Set the state with the array filled with the users data\n      this.setState({\n        bills: billData,\n      });\n    });\n  }\n\n  // Create a method to attach to button click\n  handleClick = (event, billInfo) => {\n    event.preventDefault();\n\n    // Call the database\n    const dbRef = firebase.database().ref();\n\n    // Run an equation to get the total amount per person with the data provided by the user\n    const result =\n      (billInfo.amount / billInfo.group) * (billInfo.tip / 100 + 1);\n\n    // If the required fields are empty or the total is NaN, display an alert, else display the result and push the total to the state an database\n    if (result) {\n      dbRef.push({\n        result: result.toFixed(2),\n        name: billInfo.name,\n      });\n      this.setState({\n        total: result.toFixed(2),\n      });\n    } else {\n      alert(\"Please fill all forms!\");\n    }\n  };\n\n  // Create a method to remove previous objects from the database\n  deleteBill = (billId) => {\n    const dbRef = firebase.database().ref();\n\n    dbRef.child(billId).remove();\n  };\n\n  // Populate the page\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h1 className=\"logoName\">Spl|tr</h1>\n        <h3>Bill Splitting App</h3>\n\n        <Form getTotal={this.handleClick} />\n        <h2>${this.state.total}</h2>\n\n        <h3 className=\"dataHeader\">\n          <span>Previous Bills</span>\n        </h3>\n        <Bills receipts={this.state.bills} delete={this.deleteBill} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}