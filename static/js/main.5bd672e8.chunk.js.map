{"version":3,"sources":["firebase.js","Form.js","Bills.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","inputForm","handleChange","event","setState","target","name","value","state","group","amount","tip","className","htmlFor","onChange","this","type","id","min","step","placeholder","required","max","onClick","props","getTotal","Component","Bills","bills","map","bill","key","App","handleClick","billInfo","preventDefault","console","log","total","dbRef","database","ref","result","push","toFixed","on","snapshot","firebaseData","val","billData","Form","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8PAcAA,IAASC,cAXc,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMFT,QAAf,E,QCkEeU,E,kDAhFb,aAAe,IAAD,8BACZ,gBAQFC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SATpC,EAAKC,MAAQ,CACXC,MAAO,GACPC,OAAQ,GACRC,IAAK,KALK,E,qDAyBJ,IAAD,OACP,OACE,0BAAMC,UAAU,UACd,6BACE,2BAAOC,QAAQ,aAAf,aACA,2BACEC,SAAUC,KAAKb,aACfc,KAAK,SACLC,GAAG,YACHV,MAAOQ,KAAKP,MAAMC,MAClBS,IAAI,IACJC,KAAK,IACLC,YAAY,qBACZd,KAAK,QACLe,UAAQ,KAIZ,6BACE,2BAAOR,QAAQ,cAAf,aACA,2BACEC,SAAUC,KAAKb,aACfc,KAAK,SACLC,GAAG,aACHV,MAAOQ,KAAKP,MAAME,OAClBQ,IAAI,IACJC,KAAK,MACLC,YAAY,qBACZd,KAAK,SACLe,UAAQ,KAIZ,6BACE,2BAAOR,QAAQ,aAAf,QACA,2BACEC,SAAUC,KAAKb,aACfc,KAAK,QACLC,GAAG,YACHV,MAAOQ,KAAKP,MAAMG,IAClBO,IAAI,MACJI,IAAI,MACJH,KAAK,OACLb,KAAK,SAIT,4BAAQiB,QAAS,SAACpB,GAAD,OAAW,EAAKqB,MAAMC,SAAStB,EAAO,EAAKK,SAA5D,kB,GAzEgBkB,aCUTC,EAVD,SAACH,GACb,OACE,iCACGA,EAAMI,MAAMC,KAAI,SAACC,GAChB,OAAO,wBAAIC,IAAKD,EAAKb,IAAKa,EAAKvB,YCwDxByB,E,kDAxDb,aAAe,IAAD,8BACZ,gBA4BFC,YAAc,SAAC9B,EAAO+B,GACpB/B,EAAMgC,iBACNC,QAAQC,IAAIH,EAASI,OACrB,IAAMC,EAAQhD,EAASiD,WAAWC,MAE5BC,EAAUR,EAASxB,OAASwB,EAASzB,MAASyB,EAASvB,IAC7D4B,EAAMI,KAAKD,EAAOE,QAAQ,IAE1B,EAAKxC,SAAS,CACZkC,MAAOI,EAAOE,QAAQ,MApCxB,EAAKpC,MAAQ,CACXoB,MAAO,GACPU,MAAO,GAJG,E,gEAQO,IAAD,OACJ/C,EAASiD,WAAWC,MAG5BI,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAeD,EAASE,MAExBC,EAAW,GAEjB,IAAK,IAAMnB,KAAQiB,EACjBE,EAASN,KAAK,CACZ1B,GAAIa,EACJvB,MAAOwC,EAAajB,KAGxB,EAAK1B,SAAS,CACZwB,MAAOqB,S,+BAmBX,OACE,yBAAKrC,UAAU,WACb,wBAAIA,UAAU,YAAd,UACA,iDAEA,kBAACsC,EAAD,CAAMzB,SAAUV,KAAKkB,cACpBlB,KAAKP,MAAM8B,MACZ,kBAAC,EAAD,CAAOV,MAAOb,KAAKP,MAAMoB,a,GAnDfF,aCOEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.5bd672e8.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDsaJneEsu2c-805ApRtKW68PgiaBr9YQE\",\n  authDomain: \"spltrproject.firebaseapp.com\",\n  databaseURL: \"https://spltrproject.firebaseio.com\",\n  projectId: \"spltrproject\",\n  storageBucket: \"spltrproject.appspot.com\",\n  messagingSenderId: \"427025200282\",\n  appId: \"1:427025200282:web:ecec4d99169110f50d1b23\",\n  measurementId: \"G-B104P7SX9W\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\nexport default firebase;\n","import React, { Component } from \"react\";\n\nclass inputForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      group: \"\",\n      amount: \"\",\n      tip: 1.1,\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // getUserInput = (event) => {\n  //   event.preventDefault();\n\n  //   const result = (this.state.amount / this.state.group) * this.state.tip;\n\n  //   this.setState({\n  //     total: result.toFixed(2),\n  //   });\n  // };\n\n  render() {\n    return (\n      <form className=\"tipApp\">\n        <div>\n          <label htmlFor=\"groupSize\">How many?</label>\n          <input\n            onChange={this.handleChange}\n            type=\"number\"\n            id=\"groupSize\"\n            value={this.state.group}\n            min=\"1\"\n            step=\"1\"\n            placeholder=\"Add the group size\"\n            name=\"group\"\n            required\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"billAmount\">How much?</label>\n          <input\n            onChange={this.handleChange}\n            type=\"number\"\n            id=\"billAmount\"\n            value={this.state.amount}\n            min=\"0\"\n            step=\".01\"\n            placeholder=\"Add the bill total\"\n            name=\"amount\"\n            required\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"tipAmount\">Tip?</label>\n          <input\n            onChange={this.handleChange}\n            type=\"range\"\n            id=\"tipAmount\"\n            value={this.state.tip}\n            min=\"1.1\"\n            max=\"1.5\"\n            step=\"0.05\"\n            name=\"tip\"\n          />\n        </div>\n\n        <button onClick={(event) => this.props.getTotal(event, this.state)}>\n          Calculate\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default inputForm;\n","import React from \"react\";\n\nconst Bills = (props) => {\n  return (\n    <section>\n      {props.bills.map((bill) => {\n        return <h3 key={bill.id}>{bill.value}</h3>;\n      })}\n    </section>\n  );\n};\n\nexport default Bills;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport Form from \"./Form\";\nimport Bills from \"./Bills\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      bills: [],\n      total: 0,\n    };\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    // Event listener that watches the database\n    dbRef.on(\"value\", (snapshot) => {\n      const firebaseData = snapshot.val();\n\n      const billData = [];\n\n      for (const bill in firebaseData) {\n        billData.push({\n          id: bill,\n          value: firebaseData[bill],\n        });\n      }\n      this.setState({\n        bills: billData,\n      });\n    });\n  }\n\n  handleClick = (event, billInfo) => {\n    event.preventDefault();\n    console.log(billInfo.total);\n    const dbRef = firebase.database().ref();\n\n    const result = (billInfo.amount / billInfo.group) * billInfo.tip;\n    dbRef.push(result.toFixed(2));\n\n    this.setState({\n      total: result.toFixed(2),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h1 className=\"logoName\">Spl|tr</h1>\n        <p>Bill Splitting App</p>\n\n        <Form getTotal={this.handleClick} />\n        {this.state.total}\n        <Bills bills={this.state.bills} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}